"""
Django settings for mm3_site project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
from typing import List

# Optional import: dj-database-url for DATABASE_URL parsing in production
try:
    import dj_database_url  # type: ignore
except Exception:  # pragma: no cover - only used when not installed
    dj_database_url = None  # type: ignore

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Optional: load .env in development to ease configuration
try:
    from dotenv import load_dotenv  # type: ignore
    _env_path = Path(BASE_DIR) / ".env"
    if _env_path.exists():
        load_dotenv(_env_path)
except Exception:
    pass


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv(
    'SECRET_KEY',
    'django-insecure-@3+@)&r+*k_qrs8(g05t_$8j3co8d8_(o%(9vjr5qrpl)=$po0',
)

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv("DEBUG", "True").lower() in ("1", "true", "yes")

def _split_env_list(value: str | None) -> List[str]:
    if not value:
        return []
    return [item.strip() for item in value.split(",") if item.strip()]

ALLOWED_HOSTS = _split_env_list(os.getenv("ALLOWED_HOSTS")) if not DEBUG else ["*"]
CSRF_TRUSTED_ORIGINS = _split_env_list(os.getenv("CSRF_TRUSTED_ORIGINS"))

# Behind proxy (Render/Heroku/etc.) ensure HTTPS is respected and host headers are forwarded
USE_X_FORWARDED_HOST = True
SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")
if not DEBUG:
    CSRF_COOKIE_SECURE = True
    SESSION_COOKIE_SECURE = True


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'personagens',
    'combate',
    'salas',
    'itens',
    'channels',
]

ASGI_APPLICATION = "mm3_site.asgi.application"

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.middleware.gzip.GZipMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'mm3_site.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
    'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'mm3_site.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

_default_sqlite_url = f"sqlite:///{BASE_DIR / 'db.sqlite3'}"
_db_url = os.getenv("DATABASE_URL")

if _db_url:
    if dj_database_url is None:
        raise ImportError(
            "DATABASE_URL is set but dj-database-url is not installed. "
            "Install it with: pip install dj-database-url"
        )
    DATABASES = {
        'default': dj_database_url.parse(_db_url, conn_max_age=600),
    }
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

_redis_url = os.getenv("REDIS_URL")
if _redis_url:
    _channel_hosts = (
        [{"address": _redis_url, "ssl": True}] if _redis_url.startswith("rediss://") else [_redis_url]
    )
    CHANNEL_LAYERS = {
        "default": {
            "BACKEND": "channels_redis.core.RedisChannelLayer",
            "CONFIG": {"hosts": _channel_hosts},
        }
    }
else:
    CHANNEL_LAYERS = {
        "default": {
            "BACKEND": "channels.layers.InMemoryChannelLayer",
        }
    }

# Caches: prefer Redis if REDIS_URL is present, else LocMem
if _redis_url:
    CACHES = {
        'default': {
            'BACKEND': 'django_redis.cache.RedisCache',
            'LOCATION': _redis_url,
            'OPTIONS': {
                'CLIENT_CLASS': 'django_redis.client.DefaultClient',
            },
            'KEY_PREFIX': 'mm3',
            'TIMEOUT': 300,
        }
    }
    # Use cached DB sessions to reduce DB hits (backed by Redis cache)
    SESSION_ENGINE = 'django.contrib.sessions.backends.cached_db'
else:
    CACHES = {
        'default': {
            'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
            'LOCATION': 'mm3-locmem-cache',
            'TIMEOUT': 300,
        }
    }
# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = [BASE_DIR / "static"]
STATIC_ROOT = BASE_DIR / "staticfiles"
STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"
WHITENOISE_KEEP_ONLY_HASHED_FILES = True

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

LOGIN_REDIRECT_URL = '/personagens/meus/'
LOGOUT_REDIRECT_URL = '/'
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

"""
Optional: Use Cloudinary for persistent media in production.
We enable Cloudinary if either the consolidated CLOUDINARY_URL is set
or if the explicit trio CLOUDINARY_CLOUD_NAME/API_KEY/API_SECRET are provided.
"""
_c_url = os.getenv("CLOUDINARY_URL")
_c_name = os.getenv('CLOUDINARY_CLOUD_NAME')
_c_key = os.getenv('CLOUDINARY_API_KEY')
_c_secret = os.getenv('CLOUDINARY_API_SECRET')
_enable_cloudinary = bool(_c_url or (_c_name and _c_key and _c_secret))
if _enable_cloudinary:
    INSTALLED_APPS += [
        'cloudinary',
        'cloudinary_storage',
    ]
    # Django 5+: prefer STORAGES over deprecated DEFAULT_FILE_STORAGE
    STORAGES = {
        "default": {
            "BACKEND": 'cloudinary_storage.storage.MediaCloudinaryStorage',
        },
        # Keep Whitenoise for static files (mirrors STATICFILES_STORAGE below)
        "staticfiles": {
            "BACKEND": 'whitenoise.storage.CompressedManifestStaticFilesStorage',
        },
    }
    # If explicit credentials are provided, configure them; otherwise the library
    # will read the consolidated CLOUDINARY_URL env var automatically.
    if _c_name and _c_key and _c_secret:
        CLOUDINARY_STORAGE = {
            'CLOUD_NAME': _c_name,
            'API_KEY': _c_key,
            'API_SECRET': _c_secret,
        }

# Speed: cache template loading in production (reduces filesystem hits)
if not DEBUG:
    try:
        # Switch to cached loader
        TEMPLATES[0]['APP_DIRS'] = False
        TEMPLATES[0]['OPTIONS']['loaders'] = [
            (
                'django.template.loaders.cached.Loader',
                [
                    'django.template.loaders.filesystem.Loader',
                    'django.template.loaders.app_directories.Loader',
                ],
            )
        ]
    except Exception:
        pass
